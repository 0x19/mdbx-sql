// Code generated by capnpc-go. DO NOT EDIT.

package mdbxsql

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type User capnp.Struct

// User_TypeID is the unique identifier for the type User.
const User_TypeID = 0xfd0df4f245fce1e8

func NewUser(s *capnp.Segment) (User, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return User(st), err
}

func NewRootUser(s *capnp.Segment) (User, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return User(st), err
}

func ReadRootUser(msg *capnp.Message) (User, error) {
	root, err := msg.Root()
	return User(root.Struct()), err
}

func (s User) String() string {
	str, _ := text.Marshal(0xfd0df4f245fce1e8, capnp.Struct(s))
	return str
}

func (s User) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (User) DecodeFromPtr(p capnp.Ptr) User {
	return User(capnp.Struct{}.DecodeFromPtr(p))
}

func (s User) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s User) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s User) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s User) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s User) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s User) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s User) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s User) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s User) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s User) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s User) Age() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s User) SetAge(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// User_List is a list of User.
type User_List = capnp.StructList[User]

// NewUser creates a new list of User.
func NewUser_List(s *capnp.Segment, sz int32) (User_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[User](l), err
}

// User_Future is a wrapper for a User promised by a client call.
type User_Future struct{ *capnp.Future }

func (f User_Future) Struct() (User, error) {
	p, err := f.Future.Ptr()
	return User(p.Struct()), err
}

const schema_91a877877ad1a9c6 = "x\xda\x12\xc8s`1\xe4\xdd\xcf\xc8\xc0\x14(\xc2\xca" +
	"\xf6\xff\xc5\xc3?\xae\x9f\xbe\xf0\xfee\x08\xe4fd\xfc" +
	"\x7fl\xe5\xc5\xaa\xf6\xf2\x15\x13\x19X\x19\xd9\x19\x18\x04" +
	"\x8f6\x09\x9e\x04\xd3\xeb\x19t\xff\x97\x16\xa7\x16\xe9%" +
	"'\x160\xe6\x15X\x85\x16\xa7\x161\x0402\x06\xf2" +
	"0\xb300\xb0020\x08\xbaJ10\x04:0" +
	"3\x06\xfa0122\x8a0\x82\xc4<\xb5\x18\x18\x02" +
	"]\x98\x19\x03\x03\x98\x18\x05\x99\x18E\x18\x99\x18\x18\x04" +
	"}\x95\x18\x18\x02=\x98\x19\x03C\x98\x18\x993S\x18" +
	"Y\x18\x98\x18Y\x18\x18\xf9\xf3\x12sS\x19y\x18\x98" +
	"\x18y\x18\x18\xd9\x13\xd3Sa\x12\x80\x00\x00\x00\xff\xff" +
	"f\xe9$^"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_91a877877ad1a9c6,
		Nodes: []uint64{
			0xfd0df4f245fce1e8,
		},
		Compressed: true,
	})
}
